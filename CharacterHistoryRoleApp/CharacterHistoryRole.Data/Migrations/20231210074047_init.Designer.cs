// <auto-generated />
using System;
using CharacterHistoryRole.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterHistoryRole.Data.Migrations
{
    [DbContext(typeof(CharacterHistoryRoleContext))]
    [Migration("20231210074047_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.AtributesAbilities", b =>
                {
                    b.Property<Guid>("CharacterBioDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtributesAbilitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterBioDetailId");

                    b.ToTable("AtributesAbilities");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.BackPack", b =>
                {
                    b.Property<Guid>("BackPackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CharacterBioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BackPackId")
                        .HasName("PK_BackPack_CharacterBio");

                    b.HasIndex("CharacterBioId");

                    b.ToTable("BackPack");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.BackPackItem", b =>
                {
                    b.Property<Guid>("BackPackItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BackPackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BackPackItemId");

                    b.HasIndex("BackPackId");

                    b.ToTable("BackPackItem");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.CharacterBio", b =>
                {
                    b.Property<Guid>("CharacterBioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BioInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CurrentTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharacterBioId")
                        .HasName("PK_Bio_User_Group");

                    b.HasIndex("UserId");

                    b.ToTable("CharacterBio");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.CharacterBioDetail", b =>
                {
                    b.Property<Guid>("CharacterBioDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterBioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassRaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Destress")
                        .HasColumnType("int");

                    b.Property<int?>("Force")
                        .HasColumnType("int");

                    b.Property<int?>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("LifePoints")
                        .HasColumnType("int");

                    b.Property<int?>("Perception")
                        .HasColumnType("int");

                    b.Property<int?>("PowerPoints")
                        .HasColumnType("int");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("CharacterBioDetailId");

                    b.ToTable("CharacterBioDetail");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.ClassRace", b =>
                {
                    b.Property<Guid>("ClassRaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassRaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassRaceId");

                    b.ToTable("ClassRace");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CurrentTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Permmission", b =>
                {
                    b.Property<int>("PermmissionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CurrentTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermmissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermmissionId");

                    b.ToTable("Permmission");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Profile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CurrentTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.ProfilePermmission", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermmissionId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId")
                        .HasName("PK_ProfilePermmissions");

                    b.HasIndex("PermmissionId");

                    b.ToTable("ProfilePermmission");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Race", b =>
                {
                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.RacialBackground", b =>
                {
                    b.Property<Guid>("RacialBackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterBioDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RacialBackgroundId");

                    b.HasIndex("CharacterBioDetailId");

                    b.ToTable("RacialBackground");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CurrentTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId")
                        .HasName("PK_UserGroup");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.AtributesAbilities", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBioDetail", "CharacterBioDetail")
                        .WithMany("AtributesAbilities")
                        .HasForeignKey("CharacterBioDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Atributies_CharacterBioDetail");

                    b.Navigation("CharacterBioDetail");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.BackPack", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBio", "CharacterBio")
                        .WithMany("BackPack")
                        .HasForeignKey("CharacterBioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterBio");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.BackPackItem", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.BackPack", "BackPack")
                        .WithMany("BackPackItem")
                        .HasForeignKey("BackPackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BackPackItem_BackPack");

                    b.Navigation("BackPack");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.CharacterBio", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBioDetail", "CharacterBioDetail")
                        .WithOne("CharacterBio")
                        .HasForeignKey("CharacterHistoryRole.Domain.Models.CharacterBio", "CharacterBioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterHistoryRole.Domain.Models.User", "User")
                        .WithMany("CharacterBio")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Character_Bio");

                    b.Navigation("CharacterBioDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.ClassRace", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBioDetail", "CharacterBioDetail")
                        .WithOne("ClassRace")
                        .HasForeignKey("CharacterHistoryRole.Domain.Models.ClassRace", "ClassRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterBioDetail");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.ProfilePermmission", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.Permmission", "Permmission")
                        .WithMany("ProfilePermmission")
                        .HasForeignKey("PermmissionId")
                        .IsRequired()
                        .HasConstraintName("FK_ProfilePermmisions_Permmissions");

                    b.HasOne("CharacterHistoryRole.Domain.Models.Profile", "Profile")
                        .WithMany("ProfilePermmission")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_ProfilePermmissions_Profile");

                    b.HasOne("CharacterHistoryRole.Domain.Models.User", "User")
                        .WithMany("ProfilePermmissions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_ProfilePermmissions");

                    b.Navigation("Permmission");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Race", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBioDetail", "CharacterBioDetail")
                        .WithOne("Race")
                        .HasForeignKey("CharacterHistoryRole.Domain.Models.Race", "RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterBioDetail");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.RacialBackground", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBioDetail", "CharacterBioDetail")
                        .WithMany("RacialBackground")
                        .HasForeignKey("CharacterBioDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RacilBackGroud_CharacterBioDetail");

                    b.Navigation("CharacterBioDetail");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("CharacterHistoryRole.Domain.Models.CharacterBio", "CharacterBio")
                        .WithMany("UserGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_CharacterBio");

                    b.HasOne("CharacterHistoryRole.Domain.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroups_Group");

                    b.HasOne("CharacterHistoryRole.Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroups_Users");

                    b.Navigation("CharacterBio");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.BackPack", b =>
                {
                    b.Navigation("BackPackItem");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.CharacterBio", b =>
                {
                    b.Navigation("BackPack");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.CharacterBioDetail", b =>
                {
                    b.Navigation("AtributesAbilities");

                    b.Navigation("CharacterBio")
                        .IsRequired();

                    b.Navigation("ClassRace")
                        .IsRequired();

                    b.Navigation("Race")
                        .IsRequired();

                    b.Navigation("RacialBackground");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Group", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Permmission", b =>
                {
                    b.Navigation("ProfilePermmission");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.Profile", b =>
                {
                    b.Navigation("ProfilePermmission");
                });

            modelBuilder.Entity("CharacterHistoryRole.Domain.Models.User", b =>
                {
                    b.Navigation("CharacterBio");

                    b.Navigation("ProfilePermmissions");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
